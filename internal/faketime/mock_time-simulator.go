// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\faketime\time-simulator.go

// Package faketime is a generated GoMock package.
package faketime

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTimeInterface is a mock of TimeInterface interface.
type MockTimeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTimeInterfaceMockRecorder
}

// MockTimeInterfaceMockRecorder is the mock recorder for MockTimeInterface.
type MockTimeInterfaceMockRecorder struct {
	mock *MockTimeInterface
}

// NewMockTimeInterface creates a new mock instance.
func NewMockTimeInterface(ctrl *gomock.Controller) *MockTimeInterface {
	mock := &MockTimeInterface{ctrl: ctrl}
	mock.recorder = &MockTimeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeInterface) EXPECT() *MockTimeInterfaceMockRecorder {
	return m.recorder
}

// GetTime mocks base method.
func (m *MockTimeInterface) GetTime() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MockTimeInterfaceMockRecorder) GetTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MockTimeInterface)(nil).GetTime))
}

// IncreaseTime mocks base method.
func (m *MockTimeInterface) IncreaseTime(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseTime", arg0)
}

// IncreaseTime indicates an expected call of IncreaseTime.
func (mr *MockTimeInterfaceMockRecorder) IncreaseTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseTime", reflect.TypeOf((*MockTimeInterface)(nil).IncreaseTime), arg0)
}

// NotifyAll mocks base method.
func (m *MockTimeInterface) NotifyAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyAll")
}

// NotifyAll indicates an expected call of NotifyAll.
func (mr *MockTimeInterfaceMockRecorder) NotifyAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAll", reflect.TypeOf((*MockTimeInterface)(nil).NotifyAll))
}

// Register mocks base method.
func (m *MockTimeInterface) Register(o Observer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", o)
}

// Register indicates an expected call of Register.
func (mr *MockTimeInterfaceMockRecorder) Register(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockTimeInterface)(nil).Register), o)
}

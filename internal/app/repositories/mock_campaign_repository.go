// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\app\repositories\campaign_repository.go

// Package repositories is a generated GoMock package.
package repositories

import (
	models "hb-campaign/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCampaignRepositoryI is a mock of CampaignRepositoryI interface.
type MockCampaignRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignRepositoryIMockRecorder
}

// MockCampaignRepositoryIMockRecorder is the mock recorder for MockCampaignRepositoryI.
type MockCampaignRepositoryIMockRecorder struct {
	mock *MockCampaignRepositoryI
}

// NewMockCampaignRepositoryI creates a new mock instance.
func NewMockCampaignRepositoryI(ctrl *gomock.Controller) *MockCampaignRepositoryI {
	mock := &MockCampaignRepositoryI{ctrl: ctrl}
	mock.recorder = &MockCampaignRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignRepositoryI) EXPECT() *MockCampaignRepositoryIMockRecorder {
	return m.recorder
}

// CreateCampaign mocks base method.
func (m *MockCampaignRepositoryI) CreateCampaign(cc models.CreateCampaignDTO) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", cc)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaign indicates an expected call of CreateCampaign.
func (mr *MockCampaignRepositoryIMockRecorder) CreateCampaign(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockCampaignRepositoryI)(nil).CreateCampaign), cc)
}

// GetAllActiveCampaigns mocks base method.
func (m *MockCampaignRepositoryI) GetAllActiveCampaigns() ([]models.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveCampaigns")
	ret0, _ := ret[0].([]models.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveCampaigns indicates an expected call of GetAllActiveCampaigns.
func (mr *MockCampaignRepositoryIMockRecorder) GetAllActiveCampaigns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveCampaigns", reflect.TypeOf((*MockCampaignRepositoryI)(nil).GetAllActiveCampaigns))
}

// GetAllCampaignsWithFinishTimes mocks base method.
func (m *MockCampaignRepositoryI) GetAllCampaignsWithFinishTimes() ([]models.CampaignWithFinishTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCampaignsWithFinishTimes")
	ret0, _ := ret[0].([]models.CampaignWithFinishTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCampaignsWithFinishTimes indicates an expected call of GetAllCampaignsWithFinishTimes.
func (mr *MockCampaignRepositoryIMockRecorder) GetAllCampaignsWithFinishTimes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCampaignsWithFinishTimes", reflect.TypeOf((*MockCampaignRepositoryI)(nil).GetAllCampaignsWithFinishTimes))
}

// GetAllEndedCampaigns mocks base method.
func (m *MockCampaignRepositoryI) GetAllEndedCampaigns() ([]models.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEndedCampaigns")
	ret0, _ := ret[0].([]models.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEndedCampaigns indicates an expected call of GetAllEndedCampaigns.
func (mr *MockCampaignRepositoryIMockRecorder) GetAllEndedCampaigns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEndedCampaigns", reflect.TypeOf((*MockCampaignRepositoryI)(nil).GetAllEndedCampaigns))
}

// GetCampaignByName mocks base method.
func (m *MockCampaignRepositoryI) GetCampaignByName(campaignCode string) (models.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignByName", campaignCode)
	ret0, _ := ret[0].(models.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignByName indicates an expected call of GetCampaignByName.
func (mr *MockCampaignRepositoryIMockRecorder) GetCampaignByName(campaignCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignByName", reflect.TypeOf((*MockCampaignRepositoryI)(nil).GetCampaignByName), campaignCode)
}

// UpdateStatusByCampaignName mocks base method.
func (m *MockCampaignRepositoryI) UpdateStatusByCampaignName(campaignName, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusByCampaignName", campaignName, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusByCampaignName indicates an expected call of UpdateStatusByCampaignName.
func (mr *MockCampaignRepositoryIMockRecorder) UpdateStatusByCampaignName(campaignName, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusByCampaignName", reflect.TypeOf((*MockCampaignRepositoryI)(nil).UpdateStatusByCampaignName), campaignName, status)
}

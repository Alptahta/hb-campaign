// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\app\services\campaign_service.go

// Package services is a generated GoMock package.
package services

import (
	models "hb-campaign/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCampaignServiceI is a mock of CampaignServiceI interface.
type MockCampaignServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignServiceIMockRecorder
}

// MockCampaignServiceIMockRecorder is the mock recorder for MockCampaignServiceI.
type MockCampaignServiceIMockRecorder struct {
	mock *MockCampaignServiceI
}

// NewMockCampaignServiceI creates a new mock instance.
func NewMockCampaignServiceI(ctrl *gomock.Controller) *MockCampaignServiceI {
	mock := &MockCampaignServiceI{ctrl: ctrl}
	mock.recorder = &MockCampaignServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignServiceI) EXPECT() *MockCampaignServiceIMockRecorder {
	return m.recorder
}

// CreateCampaign mocks base method.
func (m *MockCampaignServiceI) CreateCampaign(cp models.CreateCampaignRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", cp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCampaign indicates an expected call of CreateCampaign.
func (mr *MockCampaignServiceIMockRecorder) CreateCampaign(cp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockCampaignServiceI)(nil).CreateCampaign), cp)
}

// GetCampaignByName mocks base method.
func (m *MockCampaignServiceI) GetCampaignByName(CampaignCode string) (*models.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignByName", CampaignCode)
	ret0, _ := ret[0].(*models.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignByName indicates an expected call of GetCampaignByName.
func (mr *MockCampaignServiceIMockRecorder) GetCampaignByName(CampaignCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignByName", reflect.TypeOf((*MockCampaignServiceI)(nil).GetCampaignByName), CampaignCode)
}

// Update mocks base method.
func (m *MockCampaignServiceI) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCampaignServiceIMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCampaignServiceI)(nil).Update))
}

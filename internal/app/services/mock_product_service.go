// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\app\services\product_service.go

// Package services is a generated GoMock package.
package services

import (
	models "hb-campaign/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductServiceI is a mock of ProductServiceI interface.
type MockProductServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceIMockRecorder
}

// MockProductServiceIMockRecorder is the mock recorder for MockProductServiceI.
type MockProductServiceIMockRecorder struct {
	mock *MockProductServiceI
}

// NewMockProductServiceI creates a new mock instance.
func NewMockProductServiceI(ctrl *gomock.Controller) *MockProductServiceI {
	mock := &MockProductServiceI{ctrl: ctrl}
	mock.recorder = &MockProductServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductServiceI) EXPECT() *MockProductServiceIMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductServiceI) CreateProduct(cp models.CreateProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", cp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductServiceIMockRecorder) CreateProduct(cp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductServiceI)(nil).CreateProduct), cp)
}

// GetProductByProductCode mocks base method.
func (m *MockProductServiceI) GetProductByProductCode(arg0 string) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByProductCode", arg0)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByProductCode indicates an expected call of GetProductByProductCode.
func (mr *MockProductServiceIMockRecorder) GetProductByProductCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByProductCode", reflect.TypeOf((*MockProductServiceI)(nil).GetProductByProductCode), arg0)
}

// GetProductInitialPriceByProductCode mocks base method.
func (m *MockProductServiceI) GetProductInitialPriceByProductCode(productCode string) (*models.ProductPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductInitialPriceByProductCode", productCode)
	ret0, _ := ret[0].(*models.ProductPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductInitialPriceByProductCode indicates an expected call of GetProductInitialPriceByProductCode.
func (mr *MockProductServiceIMockRecorder) GetProductInitialPriceByProductCode(productCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductInitialPriceByProductCode", reflect.TypeOf((*MockProductServiceI)(nil).GetProductInitialPriceByProductCode), productCode)
}

// GetProductPriceByProductCode mocks base method.
func (m *MockProductServiceI) GetProductPriceByProductCode(productCode string) (*models.ProductPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductPriceByProductCode", productCode)
	ret0, _ := ret[0].(*models.ProductPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductPriceByProductCode indicates an expected call of GetProductPriceByProductCode.
func (mr *MockProductServiceIMockRecorder) GetProductPriceByProductCode(productCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductPriceByProductCode", reflect.TypeOf((*MockProductServiceI)(nil).GetProductPriceByProductCode), productCode)
}

// GetProductStockByProductName mocks base method.
func (m *MockProductServiceI) GetProductStockByProductName(productCode string) (*models.ProductStock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductStockByProductName", productCode)
	ret0, _ := ret[0].(*models.ProductStock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductStockByProductName indicates an expected call of GetProductStockByProductName.
func (mr *MockProductServiceIMockRecorder) GetProductStockByProductName(productCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductStockByProductName", reflect.TypeOf((*MockProductServiceI)(nil).GetProductStockByProductName), productCode)
}

// UpdateProductPriceByProductCode mocks base method.
func (m *MockProductServiceI) UpdateProductPriceByProductCode(productCode string, newPrice float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductPriceByProductCode", productCode, newPrice)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductPriceByProductCode indicates an expected call of UpdateProductPriceByProductCode.
func (mr *MockProductServiceIMockRecorder) UpdateProductPriceByProductCode(productCode, newPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductPriceByProductCode", reflect.TypeOf((*MockProductServiceI)(nil).UpdateProductPriceByProductCode), productCode, newPrice)
}

// UpdateProductStockByProductName mocks base method.
func (m *MockProductServiceI) UpdateProductStockByProductName(arg0 models.UpdateProductStock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductStockByProductName", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductStockByProductName indicates an expected call of UpdateProductStockByProductName.
func (mr *MockProductServiceIMockRecorder) UpdateProductStockByProductName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductStockByProductName", reflect.TypeOf((*MockProductServiceI)(nil).UpdateProductStockByProductName), arg0)
}
